/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [\srcWithDoc\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPModels.Resources;
using CSSPServices.Resources;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace CSSPServices
{
    /// <summary>
    /// > [!NOTE]
    /// > 
    /// > <para>**Used by [CSSPWebAPI.Controllers](CSSPWebAPI.Controllers.html)** : [RainExceedanceController](CSSPWebAPI.Controllers.RainExceedanceController.html)</para>
    /// > <para>**Requires [CSSPModels](CSSPModels.html)** : [CSSPModels.RainExceedance](CSSPModels.RainExceedance.html)</para>
    /// > <para>**Return to [CSSPServices](CSSPServices.html)**</para>
    /// </summary>
    public partial class RainExceedanceService : BaseService
    {
        #region Variables
        #endregion Variables

        #region Properties
        #endregion Properties

        #region Constructors
        /// <summary>
        /// CSSPDB RainExceedances table service constructor
        /// </summary>
        /// <param name="query">[Query](CSSPModels.Query.html) object for filtering of service functions</param>
        /// <param name="db">[CSSPDBContext](CSSPModels.CSSPDBContext.html) referencing the CSSP database context</param>
        /// <param name="ContactID">Representing the contact identifier of the person connecting to the service</param>
        public RainExceedanceService(Query query, CSSPDBContext db, int ContactID)
            : base(query, db, ContactID)
        {
        }
        #endregion Constructors

        #region Validation
        /// <summary>
        /// Validate function for all RainExceedanceService commands
        /// </summary>
        /// <param name="validationContext">System.ComponentModel.DataAnnotations.ValidationContext (Describes the context in which a validation check is performed.)</param>
        /// <param name="actionDBType">[ActionDBTypeEnum] (CSSPEnums.ActionDBTypeEnum.html) action type to validate</param>
        /// <returns>IEnumerable of ValidationResult (Where ValidationResult is a container for the results of a validation request.)</returns>
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            Enums enums = new Enums(LanguageRequest);
            RainExceedance rainExceedance = validationContext.ObjectInstance as RainExceedance;
            rainExceedance.HasErrors = false;

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (rainExceedance.RainExceedanceID == 0)
                {
                    rainExceedance.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "RainExceedanceID"), new[] { "RainExceedanceID" });
                }

                if (!(from c in db.RainExceedances select c).Where(c => c.RainExceedanceID == rainExceedance.RainExceedanceID).Any())
                {
                    rainExceedance.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "RainExceedance", "RainExceedanceID", rainExceedance.RainExceedanceID.ToString()), new[] { "RainExceedanceID" });
                }
            }

            if (rainExceedance.StartDate_Local != null && ((DateTime)rainExceedance.StartDate_Local).Year < 1980)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "StartDate_Local", "1980"), new[] { "StartDate_Local" });
            }

            if (rainExceedance.EndDate_Local != null && ((DateTime)rainExceedance.EndDate_Local).Year < 1980)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "EndDate_Local", "1980"), new[] { "EndDate_Local" });
            }

            if (rainExceedance.StartDate_Local > rainExceedance.EndDate_Local)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._DateIsBiggerThan_, "EndDate_Local", "RainExceedanceStartDate_Local"), new[] { "EndDate_Local" });
            }

            if (rainExceedance.RainMaximum_mm != null)
            {
                if (rainExceedance.RainMaximum_mm < 0 || rainExceedance.RainMaximum_mm > 300)
                {
                    rainExceedance.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainMaximum_mm", "0", "300"), new[] { "RainMaximum_mm" });
                }
            }

            if (rainExceedance.RainExtreme_mm != null)
            {
                if (rainExceedance.RainExtreme_mm < 0 || rainExceedance.RainExtreme_mm > 300)
                {
                    rainExceedance.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainExtreme_mm", "0", "300"), new[] { "RainExtreme_mm" });
                }
            }

            if (rainExceedance.DaysPriorToStart < 0 || rainExceedance.DaysPriorToStart > 30)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "DaysPriorToStart", "0", "30"), new[] { "DaysPriorToStart" });
            }

            if (string.IsNullOrWhiteSpace(rainExceedance.ProvinceTVItemIDs))
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "ProvinceTVItemIDs"), new[] { "ProvinceTVItemIDs" });
            }

            if (!string.IsNullOrWhiteSpace(rainExceedance.ProvinceTVItemIDs) && rainExceedance.ProvinceTVItemIDs.Length > 250)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "ProvinceTVItemIDs", "250"), new[] { "ProvinceTVItemIDs" });
            }

            if (string.IsNullOrWhiteSpace(rainExceedance.SubsectorTVItemIDs))
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "SubsectorTVItemIDs"), new[] { "SubsectorTVItemIDs" });
            }

            if (!string.IsNullOrWhiteSpace(rainExceedance.SubsectorTVItemIDs) && rainExceedance.SubsectorTVItemIDs.Length > 250)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "SubsectorTVItemIDs", "250"), new[] { "SubsectorTVItemIDs" });
            }

            if (string.IsNullOrWhiteSpace(rainExceedance.ClimateSiteTVItemIDs))
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "ClimateSiteTVItemIDs"), new[] { "ClimateSiteTVItemIDs" });
            }

            if (!string.IsNullOrWhiteSpace(rainExceedance.ClimateSiteTVItemIDs) && rainExceedance.ClimateSiteTVItemIDs.Length > 250)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "ClimateSiteTVItemIDs", "250"), new[] { "ClimateSiteTVItemIDs" });
            }

            if (string.IsNullOrWhiteSpace(rainExceedance.EmailDistributionListIDs))
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "EmailDistributionListIDs"), new[] { "EmailDistributionListIDs" });
            }

            if (!string.IsNullOrWhiteSpace(rainExceedance.EmailDistributionListIDs) && rainExceedance.EmailDistributionListIDs.Length > 250)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "EmailDistributionListIDs", "250"), new[] { "EmailDistributionListIDs" });
            }

            if (rainExceedance.LastUpdateDate_UTC.Year == 1)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { "LastUpdateDate_UTC" });
            }
            else
            {
                if (rainExceedance.LastUpdateDate_UTC.Year < 1980)
                {
                rainExceedance.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { "LastUpdateDate_UTC" });
                }
            }

            TVItem TVItemLastUpdateContactTVItemID = (from c in db.TVItems where c.TVItemID == rainExceedance.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (TVItemLastUpdateContactTVItemID == null)
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", rainExceedance.LastUpdateContactTVItemID.ToString()), new[] { "LastUpdateContactTVItemID" });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(TVItemLastUpdateContactTVItemID.TVType))
                {
                    rainExceedance.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { "LastUpdateContactTVItemID" });
                }
            }

            retStr = ""; // added to stop compiling CSSPError
            if (retStr != "") // will never be true
            {
                rainExceedance.HasErrors = true;
                yield return new ValidationResult("AAA", new[] { "AAA" });
            }

        }
        #endregion Validation

        #region Functions public Generated Get
        /// <summary>
        /// Gets the RainExceedance model with the RainExceedanceID identifier
        /// </summary>
        /// <param name="RainExceedanceID">Is the identifier of [RainExceedances](CSSPModels.RainExceedance.html) table of CSSPDB</param>
        /// <returns>[RainExceedance](CSSPModels.RainExceedance.html) object connected to the CSSPDB</returns>
        public RainExceedance GetRainExceedanceWithRainExceedanceID(int RainExceedanceID)
        {
            return (from c in db.RainExceedances
                    where c.RainExceedanceID == RainExceedanceID
                    select c).FirstOrDefault();

        }
        /// <summary>
        /// Gets a list of [RainExceedance](CSSPModels.RainExceedance.html) satisfying the filters in [Query](CSSPModels.Query.html)
        /// </summary>
        /// <returns>IQueryable of [RainExceedance](CSSPModels.RainExceedance.html)</returns>
        public IQueryable<RainExceedance> GetRainExceedanceList()
        {
            IQueryable<RainExceedance> RainExceedanceQuery = (from c in db.RainExceedances select c);

            RainExceedanceQuery = EnhanceQueryStatements<RainExceedance>(RainExceedanceQuery) as IQueryable<RainExceedance>;

            return RainExceedanceQuery;
        }
        /// <summary>
        /// Gets the RainExceedanceExtraA model with the RainExceedanceID identifier
        /// </summary>
        /// <param name="RainExceedanceID">Is the identifier of [RainExceedances](CSSPModels.RainExceedance.html) table of CSSPDB</param>
        /// <returns>[RainExceedanceExtraA](CSSPModels.RainExceedanceExtraA.html) object connected to the CSSPDB</returns>
        public RainExceedanceExtraA GetRainExceedanceExtraAWithRainExceedanceID(int RainExceedanceID)
        {
            return FillRainExceedanceExtraA().Where(c => c.RainExceedanceID == RainExceedanceID).FirstOrDefault();

        }
        /// <summary>
        /// Gets a list of [RainExceedanceExtraA](CSSPModels.RainExceedanceExtraA.html) satisfying the filters in [Query](CSSPModels.Query.html)
        /// </summary>
        /// <returns>IQueryable of [RainExceedanceExtraA](CSSPModels.RainExceedanceExtraA.html)</returns>
        public IQueryable<RainExceedanceExtraA> GetRainExceedanceExtraAList()
        {
            IQueryable<RainExceedanceExtraA> RainExceedanceExtraAQuery = FillRainExceedanceExtraA();

            RainExceedanceExtraAQuery = EnhanceQueryStatements<RainExceedanceExtraA>(RainExceedanceExtraAQuery) as IQueryable<RainExceedanceExtraA>;

            return RainExceedanceExtraAQuery;
        }
        /// <summary>
        /// Gets the RainExceedanceExtraB model with the RainExceedanceID identifier
        /// </summary>
        /// <param name="RainExceedanceID">Is the identifier of [RainExceedances](CSSPModels.RainExceedance.html) table of CSSPDB</param>
        /// <returns>[RainExceedanceExtraB](CSSPModels.RainExceedanceExtraB.html) object connected to the CSSPDB</returns>
        public RainExceedanceExtraB GetRainExceedanceExtraBWithRainExceedanceID(int RainExceedanceID)
        {
            return FillRainExceedanceExtraB().Where(c => c.RainExceedanceID == RainExceedanceID).FirstOrDefault();

        }
        /// <summary>
        /// Gets a list of [RainExceedanceExtraB](CSSPModels.RainExceedanceExtraB.html) satisfying the filters in [Query](CSSPModels.Query.html)
        /// </summary>
        /// <returns>IQueryable of [RainExceedanceExtraB](CSSPModels.RainExceedanceExtraB.html)</returns>
        public IQueryable<RainExceedanceExtraB> GetRainExceedanceExtraBList()
        {
            IQueryable<RainExceedanceExtraB> RainExceedanceExtraBQuery = FillRainExceedanceExtraB();

            RainExceedanceExtraBQuery = EnhanceQueryStatements<RainExceedanceExtraB>(RainExceedanceExtraBQuery) as IQueryable<RainExceedanceExtraB>;

            return RainExceedanceExtraBQuery;
        }
        #endregion Functions public Generated Get

        #region Functions public Generated CRUD
        /// <summary>
        /// Adds an [RainExceedance](CSSPModels.RainExceedance.html) item in CSSPDB
        /// </summary>
        /// <param name="rainExceedance">Is the RainExceedance item the client want to add to CSSPDB</param>
        /// <returns>true if RainExceedance item was added to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        public bool Add(RainExceedance rainExceedance)
        {
            rainExceedance.ValidationResults = Validate(new ValidationContext(rainExceedance), ActionDBTypeEnum.Create);
            if (rainExceedance.ValidationResults.Count() > 0) return false;

            db.RainExceedances.Add(rainExceedance);

            if (!TryToSave(rainExceedance)) return false;

            return true;
        }
        /// <summary>
        /// Deletes an [RainExceedance](CSSPModels.RainExceedance.html) item in CSSPDB
        /// </summary>
        /// <param name="rainExceedance">Is the RainExceedance item the client want to add to CSSPDB. What's important here is the RainExceedanceID</param>
        /// <returns>true if RainExceedance item was deleted to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        public bool Delete(RainExceedance rainExceedance)
        {
            rainExceedance.ValidationResults = Validate(new ValidationContext(rainExceedance), ActionDBTypeEnum.Delete);
            if (rainExceedance.ValidationResults.Count() > 0) return false;

            db.RainExceedances.Remove(rainExceedance);

            if (!TryToSave(rainExceedance)) return false;

            return true;
        }
        /// <summary>
        /// Updates an [RainExceedance](CSSPModels.RainExceedance.html) item in CSSPDB
        /// </summary>
        /// <param name="rainExceedance">Is the RainExceedance item the client want to add to CSSPDB. What's important here is the RainExceedanceID</param>
        /// <returns>true if RainExceedance item was updated to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        public bool Update(RainExceedance rainExceedance)
        {
            rainExceedance.ValidationResults = Validate(new ValidationContext(rainExceedance), ActionDBTypeEnum.Update);
            if (rainExceedance.ValidationResults.Count() > 0) return false;

            db.RainExceedances.Update(rainExceedance);

            if (!TryToSave(rainExceedance)) return false;

            return true;
        }
        #endregion Functions public Generated CRUD

        #region Functions private Generated TryToSave
        /// <summary>
        /// Tries to execute the CSSPDB transaction (add/delete/update) on an [RainExceedance](CSSPModels.RainExceedance.html) item
        /// </summary>
        /// <param name="rainExceedance">Is the RainExceedance item the client want to add to CSSPDB. What's important here is the RainExceedanceID</param>
        /// <returns>true if RainExceedance item was updated to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        private bool TryToSave(RainExceedance rainExceedance)
        {
            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
                rainExceedance.ValidationResults = new List<ValidationResult>() { new ValidationResult(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")) }.AsEnumerable();
                return false;
            }

            return true;
        }
        #endregion Functions private Generated TryToSave

    }
}
