/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [\srcWithDoc\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPModels.Resources;
using CSSPServices.Resources;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace CSSPServices
{
    /// <summary>
    /// > [!NOTE]
    /// > 
    /// > <para>**Used by [CSSPWebAPI.Controllers](CSSPWebAPI.Controllers.html)** : [TVItemLanguageController](CSSPWebAPI.Controllers.TVItemLanguageController.html)</para>
    /// > <para>**Requires [CSSPModels](CSSPModels.html)** : [CSSPModels.TVItemLanguage](CSSPModels.TVItemLanguage.html)</para>
    /// > <para>**Requires [CSSPEnums](CSSPEnums.html)** : [LanguageEnum](CSSPEnums.LanguageEnum.html), [TranslationStatusEnum](CSSPEnums.TranslationStatusEnum.html)</para>
    /// > <para>**Return to [CSSPServices](CSSPServices.html)**</para>
    /// </summary>
    public partial class TVItemLanguageService : BaseService
    {
        #region Variables
        #endregion Variables

        #region Properties
        #endregion Properties

        #region Constructors
        /// <summary>
        /// CSSPDB TVItemLanguages table service constructor
        /// </summary>
        /// <param name="query">[Query](CSSPModels.Query.html) object for filtering of service functions</param>
        /// <param name="db">[CSSPDBContext](CSSPModels.CSSPDBContext.html) referencing the CSSP database context</param>
        /// <param name="ContactID">Representing the contact identifier of the person connecting to the service</param>
        public TVItemLanguageService(Query query, CSSPDBContext db, int ContactID)
            : base(query, db, ContactID)
        {
        }
        #endregion Constructors

        #region Validation
        /// <summary>
        /// Validate function for all TVItemLanguageService commands
        /// </summary>
        /// <param name="validationContext">System.ComponentModel.DataAnnotations.ValidationContext (Describes the context in which a validation check is performed.)</param>
        /// <param name="actionDBType">[ActionDBTypeEnum] (CSSPEnums.ActionDBTypeEnum.html) action type to validate</param>
        /// <returns>IEnumerable of ValidationResult (Where ValidationResult is a container for the results of a validation request.)</returns>
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            Enums enums = new Enums(LanguageRequest);
            TVItemLanguage tvItemLanguage = validationContext.ObjectInstance as TVItemLanguage;
            tvItemLanguage.HasErrors = false;

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (tvItemLanguage.TVItemLanguageID == 0)
                {
                    tvItemLanguage.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "TVItemLanguageTVItemLanguageID"), new[] { "TVItemLanguageID" });
                }

                if (!(from c in db.TVItemLanguages select c).Where(c => c.TVItemLanguageID == tvItemLanguage.TVItemLanguageID).Any())
                {
                    tvItemLanguage.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItemLanguage", "TVItemLanguageTVItemLanguageID", tvItemLanguage.TVItemLanguageID.ToString()), new[] { "TVItemLanguageID" });
                }
            }

            TVItem TVItemTVItemID = (from c in db.TVItems where c.TVItemID == tvItemLanguage.TVItemID select c).FirstOrDefault();

            if (TVItemTVItemID == null)
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "TVItemLanguageTVItemID", tvItemLanguage.TVItemID.ToString()), new[] { "TVItemID" });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Root,
                    TVTypeEnum.Address,
                    TVTypeEnum.Area,
                    TVTypeEnum.ClimateSite,
                    TVTypeEnum.Contact,
                    TVTypeEnum.Country,
                    TVTypeEnum.Email,
                    TVTypeEnum.HydrometricSite,
                    TVTypeEnum.Infrastructure,
                    TVTypeEnum.MikeBoundaryConditionWebTide,
                    TVTypeEnum.MikeBoundaryConditionMesh,
                    TVTypeEnum.MikeScenario,
                    TVTypeEnum.MikeSource,
                    TVTypeEnum.Municipality,
                    TVTypeEnum.MWQMSite,
                    TVTypeEnum.PolSourceSite,
                    TVTypeEnum.Province,
                    TVTypeEnum.Sector,
                    TVTypeEnum.Subsector,
                    TVTypeEnum.Tel,
                    TVTypeEnum.MWQMRun,
                    TVTypeEnum.Classification,
                };
                if (!AllowableTVTypes.Contains(TVItemTVItemID.TVType))
                {
                    tvItemLanguage.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsNotOfType_, "TVItemLanguageTVItemID", "Root,Address,Area,ClimateSite,Contact,Country,Email,HydrometricSite,Infrastructure,MikeBoundaryConditionWebTide,MikeBoundaryConditionMesh,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,MWQMRun,Classification"), new[] { "TVItemID" });
                }
            }

            retStr = enums.EnumTypeOK(typeof(LanguageEnum), (int?)tvItemLanguage.Language);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "TVItemLanguageLanguage"), new[] { "Language" });
            }

            if (string.IsNullOrWhiteSpace(tvItemLanguage.TVText))
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "TVItemLanguageTVText"), new[] { "TVText" });
            }

            if (!string.IsNullOrWhiteSpace(tvItemLanguage.TVText) && tvItemLanguage.TVText.Length > 200)
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "TVItemLanguageTVText", "200"), new[] { "TVText" });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)tvItemLanguage.TranslationStatus);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "TVItemLanguageTranslationStatus"), new[] { "TranslationStatus" });
            }

            if (tvItemLanguage.LastUpdateDate_UTC.Year == 1)
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "TVItemLanguageLastUpdateDate_UTC"), new[] { "LastUpdateDate_UTC" });
            }
            else
            {
                if (tvItemLanguage.LastUpdateDate_UTC.Year < 1980)
                {
                tvItemLanguage.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "TVItemLanguageLastUpdateDate_UTC", "1980"), new[] { "LastUpdateDate_UTC" });
                }
            }

            TVItem TVItemLastUpdateContactTVItemID = (from c in db.TVItems where c.TVItemID == tvItemLanguage.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (TVItemLastUpdateContactTVItemID == null)
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "TVItemLanguageLastUpdateContactTVItemID", tvItemLanguage.LastUpdateContactTVItemID.ToString()), new[] { "LastUpdateContactTVItemID" });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(TVItemLastUpdateContactTVItemID.TVType))
                {
                    tvItemLanguage.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsNotOfType_, "TVItemLanguageLastUpdateContactTVItemID", "Contact"), new[] { "LastUpdateContactTVItemID" });
                }
            }

            retStr = ""; // added to stop compiling CSSPError
            if (retStr != "") // will never be true
            {
                tvItemLanguage.HasErrors = true;
                yield return new ValidationResult("AAA", new[] { "AAA" });
            }

        }
        #endregion Validation

        #region Functions public Generated Get
        /// <summary>
        /// Gets the TVItemLanguage model with the TVItemLanguageID identifier
        /// </summary>
        /// <param name="TVItemLanguageID">Is the identifier of [TVItemLanguages](CSSPModels.TVItemLanguage.html) table of CSSPDB</param>
        /// <returns>[TVItemLanguage](CSSPModels.TVItemLanguage.html) object connected to the CSSPDB</returns>
        public TVItemLanguage GetTVItemLanguageWithTVItemLanguageID(int TVItemLanguageID)
        {
            return (from c in db.TVItemLanguages
                    where c.TVItemLanguageID == TVItemLanguageID
                    select c).FirstOrDefault();

        }
        /// <summary>
        /// Gets a list of [TVItemLanguage](CSSPModels.TVItemLanguage.html) satisfying the filters in [Query](CSSPModels.Query.html)
        /// </summary>
        /// <returns>IQueryable of [TVItemLanguage](CSSPModels.TVItemLanguage.html)</returns>
        public IQueryable<TVItemLanguage> GetTVItemLanguageList()
        {
            IQueryable<TVItemLanguage> TVItemLanguageQuery = (from c in db.TVItemLanguages select c);

            TVItemLanguageQuery = EnhanceQueryStatements<TVItemLanguage>(TVItemLanguageQuery) as IQueryable<TVItemLanguage>;

            return TVItemLanguageQuery;
        }
        /// <summary>
        /// Gets the TVItemLanguageExtraA model with the TVItemLanguageID identifier
        /// </summary>
        /// <param name="TVItemLanguageID">Is the identifier of [TVItemLanguages](CSSPModels.TVItemLanguage.html) table of CSSPDB</param>
        /// <returns>[TVItemLanguageExtraA](CSSPModels.TVItemLanguageExtraA.html) object connected to the CSSPDB</returns>
        public TVItemLanguageExtraA GetTVItemLanguageExtraAWithTVItemLanguageID(int TVItemLanguageID)
        {
            return FillTVItemLanguageExtraA().Where(c => c.TVItemLanguageID == TVItemLanguageID).FirstOrDefault();

        }
        /// <summary>
        /// Gets a list of [TVItemLanguageExtraA](CSSPModels.TVItemLanguageExtraA.html) satisfying the filters in [Query](CSSPModels.Query.html)
        /// </summary>
        /// <returns>IQueryable of [TVItemLanguageExtraA](CSSPModels.TVItemLanguageExtraA.html)</returns>
        public IQueryable<TVItemLanguageExtraA> GetTVItemLanguageExtraAList()
        {
            IQueryable<TVItemLanguageExtraA> TVItemLanguageExtraAQuery = FillTVItemLanguageExtraA();

            TVItemLanguageExtraAQuery = EnhanceQueryStatements<TVItemLanguageExtraA>(TVItemLanguageExtraAQuery) as IQueryable<TVItemLanguageExtraA>;

            return TVItemLanguageExtraAQuery;
        }
        /// <summary>
        /// Gets the TVItemLanguageExtraB model with the TVItemLanguageID identifier
        /// </summary>
        /// <param name="TVItemLanguageID">Is the identifier of [TVItemLanguages](CSSPModels.TVItemLanguage.html) table of CSSPDB</param>
        /// <returns>[TVItemLanguageExtraB](CSSPModels.TVItemLanguageExtraB.html) object connected to the CSSPDB</returns>
        public TVItemLanguageExtraB GetTVItemLanguageExtraBWithTVItemLanguageID(int TVItemLanguageID)
        {
            return FillTVItemLanguageExtraB().Where(c => c.TVItemLanguageID == TVItemLanguageID).FirstOrDefault();

        }
        /// <summary>
        /// Gets a list of [TVItemLanguageExtraB](CSSPModels.TVItemLanguageExtraB.html) satisfying the filters in [Query](CSSPModels.Query.html)
        /// </summary>
        /// <returns>IQueryable of [TVItemLanguageExtraB](CSSPModels.TVItemLanguageExtraB.html)</returns>
        public IQueryable<TVItemLanguageExtraB> GetTVItemLanguageExtraBList()
        {
            IQueryable<TVItemLanguageExtraB> TVItemLanguageExtraBQuery = FillTVItemLanguageExtraB();

            TVItemLanguageExtraBQuery = EnhanceQueryStatements<TVItemLanguageExtraB>(TVItemLanguageExtraBQuery) as IQueryable<TVItemLanguageExtraB>;

            return TVItemLanguageExtraBQuery;
        }
        #endregion Functions public Generated Get

        #region Functions public Generated CRUD
        /// <summary>
        /// Adds an [TVItemLanguage](CSSPModels.TVItemLanguage.html) item in CSSPDB
        /// </summary>
        /// <param name="tvItemLanguage">Is the TVItemLanguage item the client want to add to CSSPDB</param>
        /// <returns>true if TVItemLanguage item was added to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        public bool Add(TVItemLanguage tvItemLanguage)
        {
            tvItemLanguage.ValidationResults = Validate(new ValidationContext(tvItemLanguage), ActionDBTypeEnum.Create);
            if (tvItemLanguage.ValidationResults.Count() > 0) return false;

            db.TVItemLanguages.Add(tvItemLanguage);

            if (!TryToSave(tvItemLanguage)) return false;

            return true;
        }
        /// <summary>
        /// Deletes an [TVItemLanguage](CSSPModels.TVItemLanguage.html) item in CSSPDB
        /// </summary>
        /// <param name="tvItemLanguage">Is the TVItemLanguage item the client want to add to CSSPDB. What's important here is the TVItemLanguageID</param>
        /// <returns>true if TVItemLanguage item was deleted to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        public bool Delete(TVItemLanguage tvItemLanguage)
        {
            tvItemLanguage.ValidationResults = Validate(new ValidationContext(tvItemLanguage), ActionDBTypeEnum.Delete);
            if (tvItemLanguage.ValidationResults.Count() > 0) return false;

            db.TVItemLanguages.Remove(tvItemLanguage);

            if (!TryToSave(tvItemLanguage)) return false;

            return true;
        }
        /// <summary>
        /// Updates an [TVItemLanguage](CSSPModels.TVItemLanguage.html) item in CSSPDB
        /// </summary>
        /// <param name="tvItemLanguage">Is the TVItemLanguage item the client want to add to CSSPDB. What's important here is the TVItemLanguageID</param>
        /// <returns>true if TVItemLanguage item was updated to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        public bool Update(TVItemLanguage tvItemLanguage)
        {
            tvItemLanguage.ValidationResults = Validate(new ValidationContext(tvItemLanguage), ActionDBTypeEnum.Update);
            if (tvItemLanguage.ValidationResults.Count() > 0) return false;

            db.TVItemLanguages.Update(tvItemLanguage);

            if (!TryToSave(tvItemLanguage)) return false;

            return true;
        }
        #endregion Functions public Generated CRUD

        #region Functions private Generated TryToSave
        /// <summary>
        /// Tries to execute the CSSPDB transaction (add/delete/update) on an [TVItemLanguage](CSSPModels.TVItemLanguage.html) item
        /// </summary>
        /// <param name="tvItemLanguage">Is the TVItemLanguage item the client want to add to CSSPDB. What's important here is the TVItemLanguageID</param>
        /// <returns>true if TVItemLanguage item was updated to CSSPDB, false if an error happened during the DB requested transtaction</returns>
        private bool TryToSave(TVItemLanguage tvItemLanguage)
        {
            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
                tvItemLanguage.ValidationResults = new List<ValidationResult>() { new ValidationResult(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")) }.AsEnumerable();
                return false;
            }

            return true;
        }
        #endregion Functions private Generated TryToSave

    }
}
