 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    [TestClass]
    public partial class TestDBContextServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private TestDBContextService testDBContextService { get; set; }
        #endregion Properties

        #region Constructors
        public TestDBContextServiceTest() : base()
        {
            //testDBContextService = new TestDBContextService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [TestMethod]
        public void TestDBContext_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    TestDBContext testDBContext = GetFilledRandomTestDBContext("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = testDBContextService.GetTestDBContextList().Count();

                    Assert.AreEqual(count, (from c in dbTestDB.TestDBContexts select c).Count());

                    testDBContextService.Add(testDBContext);
                    if (testDBContext.HasErrors)
                    {
                        Assert.AreEqual("", testDBContext.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.AreEqual(true, testDBContextService.GetTestDBContextList().Where(c => c == testDBContext).Any());
                    testDBContextService.Update(testDBContext);
                    if (testDBContext.HasErrors)
                    {
                        Assert.AreEqual("", testDBContext.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.AreEqual(count + 1, testDBContextService.GetTestDBContextList().Count());
                    testDBContextService.Delete(testDBContext);
                    if (testDBContext.HasErrors)
                    {
                        Assert.AreEqual("", testDBContext.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.AreEqual(count, testDBContextService.GetTestDBContextList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [TestMethod]
        public void TestDBContext_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = testDBContextService.GetTestDBContextList().Count();

                    TestDBContext testDBContext = GetFilledRandomTestDBContext("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // testDBContext.Configuration   (IConfigurationRoot)
                    // -----------------------------------

                    //CSSPError: Type not implemented [Configuration]

                    //CSSPError: Type not implemented [Configuration]


                    // -----------------------------------
                    // Is NOT Nullable
                    // testDBContext.Error   (String)
                    // -----------------------------------

                    testDBContext = null;
                    testDBContext = GetFilledRandomTestDBContext("Error");
                    Assert.AreEqual(false, testDBContextService.Add(testDBContext));
                    Assert.AreEqual(1, testDBContext.ValidationResults.Count());
                    Assert.IsTrue(testDBContext.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Error")).Any());
                    Assert.AreEqual(null, testDBContext.Error);
                    Assert.AreEqual(count, testDBContextService.GetTestDBContextList().Count());


                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Addresses   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.AppErrLogs   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.AppTasks   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.AppTaskLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.AspNetUsers   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.BoxModels   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.BoxModelLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.BoxModelResults   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Classifications   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ClimateDataValues   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ClimateSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Contacts   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ContactPreferences   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ContactShortcuts   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.DocTemplates   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.DrogueRuns   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.DrogueRunPositions   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Emails   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.EmailDistributionLists   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.EmailDistributionListLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.EmailDistributionListContacts   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.EmailDistributionListContactLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.HelpDocs   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.HydrometricDataValues   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.HydrometricSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Infrastructures   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.InfrastructureLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.LabSheetDetails   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.LabSheetTubeMPNDetails   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.LabSheets   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Logs   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MapInfoPoints   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MapInfos   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MikeBoundaryConditions   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MikeScenarioResults   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MikeScenarios   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MikeSourceStartEnds   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMAnalysisReportParameters   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MikeSources   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMLookupMPNs   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMRunLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMRuns   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMSampleLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMSamples   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMSiteStartEndDates   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMSubsectorLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.MWQMSubsectors   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.PolSourceObservationIssues   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.PolSourceObservations   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.PolSourceSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.PolSourceSiteEffects   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.PolSourceSiteEffectTerms   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.RatingCurveValues   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.RainExceedances   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.RainExceedanceClimateSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.RatingCurves   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ResetPasswords   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ReportSections   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ReportTypes   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.SamplingPlanSubsectorSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.SamplingPlanSubsectors   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.SamplingPlanEmails   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.SamplingPlans   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.SpillLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Spills   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Tels   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TideDataValues   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TideLocations   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TideSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVFileLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVFiles   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVItems   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVItemLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVItemLinks   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVItemStats   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVItemUserAuthorizations   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.TVTypeUserAuthorizations   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.UseOfSites   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.VPAmbients   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.VPResults   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.VPScenarioLanguages   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.VPScenarios   (DbSet`1)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Database   (DatabaseFacade)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ChangeTracker   (ChangeTracker)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.Model   (IModel)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [IsVirtual]
                    // testDBContext.ContextId   (DbContextId)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetTestDBContextWithTestDBContextID(testDBContext.TestDBContextID)
        [TestMethod]
        public void GetTestDBContextWithTestDBContextID__testDBContext_TestDBContextID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    TestDBContext testDBContext = (from c in dbTestDB.TestDBContexts select c).FirstOrDefault();
                    Assert.IsNotNull(testDBContext);

                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        testDBContextService.Query.Extra = extra;

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            TestDBContext testDBContextRet = testDBContextService.GetTestDBContextWithTestDBContextID(testDBContext.TestDBContextID);
                            CheckTestDBContextFields(new List<TestDBContext>() { testDBContextRet });
                            Assert.AreEqual(testDBContext.TestDBContextID, testDBContextRet.TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextWithTestDBContextID(testDBContext.TestDBContextID)

        #region Tests Generated for GetTestDBContextList()
        [TestMethod]
        public void GetTestDBContextList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    TestDBContext testDBContext = (from c in dbTestDB.TestDBContexts select c).FirstOrDefault();
                    Assert.IsNotNull(testDBContext);

                    List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                    testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Take(200).ToList();

                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        testDBContextService.Query.Extra = extra;

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList()

        #region Tests Generated for GetTestDBContextList() Skip Take
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 1, 1, "", "", "", extra);

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take

        #region Tests Generated for GetTestDBContextList() Skip Take Asc
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 1, 1,  "TestDBContextID", "", "", extra);

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).OrderBy(c => c.TestDBContextID).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take Asc

        #region Tests Generated for GetTestDBContextList() Skip Take 2 Asc
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 1, 1, "TestDBContextID,Error", "", "", extra);

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).OrderBy(c => c.TestDBContextID).ThenBy(c => c.Error).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take 2 Asc

        #region Tests Generated for GetTestDBContextList() Skip Take Asc Where
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 0, 1, "TestDBContextID", "", "TestDBContextID,EQ,4", "");

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Where(c => c.TestDBContextID == 4).OrderBy(c => c.TestDBContextID).Skip(0).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take Asc Where

        #region Tests Generated for GetTestDBContextList() Skip Take Asc 2 Where
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 0, 1, "TestDBContextID", "", "TestDBContextID,GT,2|TestDBContextID,LT,5", "");

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Where(c => c.TestDBContextID > 2 && c.TestDBContextID < 5).Skip(0).Take(1).OrderBy(c => c.TestDBContextID).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take Asc 2 Where

        #region Tests Generated for GetTestDBContextList() Skip Take Desc
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 1, 1, "", "TestDBContextID", "", extra);

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).OrderByDescending(c => c.TestDBContextID).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take Desc

        #region Tests Generated for GetTestDBContextList() Skip Take 2 Desc
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 1, 1, "", "TestDBContextID,Error", "", extra);

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).OrderByDescending(c => c.TestDBContextID).ThenByDescending(c => c.Error).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take 2 Desc

        #region Tests Generated for GetTestDBContextList() Skip Take Desc Where
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 0, 1, "TestDBContextID", "", "TestDBContextID,EQ,4", "");

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Where(c => c.TestDBContextID == 4).OrderByDescending(c => c.TestDBContextID).Skip(0).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take Desc Where

        #region Tests Generated for GetTestDBContextList() Skip Take Desc 2 Where
        [TestMethod]
        public void GetTestDBContextList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 0, 1, "", "TestDBContextID", "TestDBContextID,GT,2|TestDBContextID,LT,5", "");

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Where(c => c.TestDBContextID > 2 && c.TestDBContextID < 5).OrderByDescending(c => c.TestDBContextID).Skip(0).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() Skip Take Desc 2 Where

        #region Tests Generated for GetTestDBContextList() 2 Where
        [TestMethod]
        public void GetTestDBContextList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        TestDBContextService testDBContextService = new TestDBContextService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        testDBContextService.Query = testDBContextService.FillQuery(typeof(TestDBContext), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "TestDBContextID,GT,2|TestDBContextID,LT,5", extra);

                        List<TestDBContext> testDBContextDirectQueryList = new List<TestDBContext>();
                        testDBContextDirectQueryList = (from c in dbTestDB.TestDBContexts select c).Where(c => c.TestDBContextID > 2 && c.TestDBContextID < 5).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<TestDBContext> testDBContextList = new List<TestDBContext>();
                            testDBContextList = testDBContextService.GetTestDBContextList().ToList();
                            CheckTestDBContextFields(testDBContextList);
                            Assert.AreEqual(testDBContextDirectQueryList[0].TestDBContextID, testDBContextList[0].TestDBContextID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetTestDBContextList() 2 Where

        #region Functions private
        private void CheckTestDBContextFields(List<TestDBContext> testDBContextList)
        {
            Assert.IsNotNull(testDBContextList[0].Configuration);
            Assert.IsFalse(string.IsNullOrWhiteSpace(testDBContextList[0].Error));
            Assert.IsNotNull(testDBContextList[0].Addresses);
            Assert.IsNotNull(testDBContextList[0].AppErrLogs);
            Assert.IsNotNull(testDBContextList[0].AppTasks);
            Assert.IsNotNull(testDBContextList[0].AppTaskLanguages);
            Assert.IsNotNull(testDBContextList[0].AspNetUsers);
            Assert.IsNotNull(testDBContextList[0].BoxModels);
            Assert.IsNotNull(testDBContextList[0].BoxModelLanguages);
            Assert.IsNotNull(testDBContextList[0].BoxModelResults);
            Assert.IsNotNull(testDBContextList[0].Classifications);
            Assert.IsNotNull(testDBContextList[0].ClimateDataValues);
            Assert.IsNotNull(testDBContextList[0].ClimateSites);
            Assert.IsNotNull(testDBContextList[0].Contacts);
            Assert.IsNotNull(testDBContextList[0].ContactPreferences);
            Assert.IsNotNull(testDBContextList[0].ContactShortcuts);
            Assert.IsNotNull(testDBContextList[0].DocTemplates);
            Assert.IsNotNull(testDBContextList[0].DrogueRuns);
            Assert.IsNotNull(testDBContextList[0].DrogueRunPositions);
            Assert.IsNotNull(testDBContextList[0].Emails);
            Assert.IsNotNull(testDBContextList[0].EmailDistributionLists);
            Assert.IsNotNull(testDBContextList[0].EmailDistributionListLanguages);
            Assert.IsNotNull(testDBContextList[0].EmailDistributionListContacts);
            Assert.IsNotNull(testDBContextList[0].EmailDistributionListContactLanguages);
            Assert.IsNotNull(testDBContextList[0].HelpDocs);
            Assert.IsNotNull(testDBContextList[0].HydrometricDataValues);
            Assert.IsNotNull(testDBContextList[0].HydrometricSites);
            Assert.IsNotNull(testDBContextList[0].Infrastructures);
            Assert.IsNotNull(testDBContextList[0].InfrastructureLanguages);
            Assert.IsNotNull(testDBContextList[0].LabSheetDetails);
            Assert.IsNotNull(testDBContextList[0].LabSheetTubeMPNDetails);
            Assert.IsNotNull(testDBContextList[0].LabSheets);
            Assert.IsNotNull(testDBContextList[0].Logs);
            Assert.IsNotNull(testDBContextList[0].MapInfoPoints);
            Assert.IsNotNull(testDBContextList[0].MapInfos);
            Assert.IsNotNull(testDBContextList[0].MikeBoundaryConditions);
            Assert.IsNotNull(testDBContextList[0].MikeScenarioResults);
            Assert.IsNotNull(testDBContextList[0].MikeScenarios);
            Assert.IsNotNull(testDBContextList[0].MikeSourceStartEnds);
            Assert.IsNotNull(testDBContextList[0].MWQMAnalysisReportParameters);
            Assert.IsNotNull(testDBContextList[0].MikeSources);
            Assert.IsNotNull(testDBContextList[0].MWQMLookupMPNs);
            Assert.IsNotNull(testDBContextList[0].MWQMRunLanguages);
            Assert.IsNotNull(testDBContextList[0].MWQMRuns);
            Assert.IsNotNull(testDBContextList[0].MWQMSampleLanguages);
            Assert.IsNotNull(testDBContextList[0].MWQMSamples);
            Assert.IsNotNull(testDBContextList[0].MWQMSiteStartEndDates);
            Assert.IsNotNull(testDBContextList[0].MWQMSites);
            Assert.IsNotNull(testDBContextList[0].MWQMSubsectorLanguages);
            Assert.IsNotNull(testDBContextList[0].MWQMSubsectors);
            Assert.IsNotNull(testDBContextList[0].PolSourceObservationIssues);
            Assert.IsNotNull(testDBContextList[0].PolSourceObservations);
            Assert.IsNotNull(testDBContextList[0].PolSourceSites);
            Assert.IsNotNull(testDBContextList[0].PolSourceSiteEffects);
            Assert.IsNotNull(testDBContextList[0].PolSourceSiteEffectTerms);
            Assert.IsNotNull(testDBContextList[0].RatingCurveValues);
            Assert.IsNotNull(testDBContextList[0].RainExceedances);
            Assert.IsNotNull(testDBContextList[0].RainExceedanceClimateSites);
            Assert.IsNotNull(testDBContextList[0].RatingCurves);
            Assert.IsNotNull(testDBContextList[0].ResetPasswords);
            Assert.IsNotNull(testDBContextList[0].ReportSections);
            Assert.IsNotNull(testDBContextList[0].ReportTypes);
            Assert.IsNotNull(testDBContextList[0].SamplingPlanSubsectorSites);
            Assert.IsNotNull(testDBContextList[0].SamplingPlanSubsectors);
            Assert.IsNotNull(testDBContextList[0].SamplingPlanEmails);
            Assert.IsNotNull(testDBContextList[0].SamplingPlans);
            Assert.IsNotNull(testDBContextList[0].SpillLanguages);
            Assert.IsNotNull(testDBContextList[0].Spills);
            Assert.IsNotNull(testDBContextList[0].Tels);
            Assert.IsNotNull(testDBContextList[0].TideDataValues);
            Assert.IsNotNull(testDBContextList[0].TideLocations);
            Assert.IsNotNull(testDBContextList[0].TideSites);
            Assert.IsNotNull(testDBContextList[0].TVFileLanguages);
            Assert.IsNotNull(testDBContextList[0].TVFiles);
            Assert.IsNotNull(testDBContextList[0].TVItems);
            Assert.IsNotNull(testDBContextList[0].TVItemLanguages);
            Assert.IsNotNull(testDBContextList[0].TVItemLinks);
            Assert.IsNotNull(testDBContextList[0].TVItemStats);
            Assert.IsNotNull(testDBContextList[0].TVItemUserAuthorizations);
            Assert.IsNotNull(testDBContextList[0].TVTypeUserAuthorizations);
            Assert.IsNotNull(testDBContextList[0].UseOfSites);
            Assert.IsNotNull(testDBContextList[0].VPAmbients);
            Assert.IsNotNull(testDBContextList[0].VPResults);
            Assert.IsNotNull(testDBContextList[0].VPScenarioLanguages);
            Assert.IsNotNull(testDBContextList[0].VPScenarios);
            Assert.IsNotNull(testDBContextList[0].Database);
            Assert.IsNotNull(testDBContextList[0].ChangeTracker);
            Assert.IsNotNull(testDBContextList[0].Model);
            Assert.IsNotNull(testDBContextList[0].ContextId);
        }
        private TestDBContext GetFilledRandomTestDBContext(string OmitPropName)
        {
            TestDBContext testDBContext = new TestDBContext();

            //CSSPError: property [Configuration] and type [TestDBContext] is  not implemented
            if (OmitPropName != "Error") testDBContext.Error = GetRandomString("", 20);

            return testDBContext;
        }
        #endregion Functions private
    }
}
